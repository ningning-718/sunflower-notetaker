#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('notetaker:server');
var http = require('http');
var https = require('https');
const process = require('process');
const mongoose = require('mongoose');
var fs = require('fs');
var config = require('../config.json');

main()
.then(() => {
  startHttpServer();
  startHttpsServer(); 
})
.catch((err) => {
  console.log(err);
  process.exit(1);
});

function startHttpServer() {
  if (!config.http.enable) {
    return;
  }

  /**
   * Get port from environment and store in Express.
   */
 var port = normalizePort(process.env.PORT || config.http.port);
 app.set('port', port);

  /**
  * Create HTTP server.
  */
 var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */ 
 server.listen(port);
 server.on('error', (err) => {
   onError(err, port)
  });
 server.on('listening', () => {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 });
}

function startHttpsServer() {
  if (!config.https.enable) {
    return;
  }
  var privateKey  = fs.readFileSync(config.https.private_key, 'utf8');
  var certificate = fs.readFileSync(config.https.cert, 'utf8');
  var credentials = {key: privateKey, cert: certificate};

  var httpsServer = https.createServer(credentials, app);
  httpsServer.listen(config.https.port);
  httpsServer.on('error', (err) => {
    onError(err, config.https.port);
  });
  httpsServer.on('listening', () => {
    var addr = httpsServer.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  });
}

async function main() {
  await mongoose.connect(config.mongo.url);
}

/**
   * Event listener for HTTP server "error" event.
   */

 function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
